// <auto-generated />
using System;
using FNO.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FNO.Domain.Migrations
{
    [DbContext(typeof(ReadModelDbContext))]
    [Migration("20180624094136_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FNO.Domain.Models.Corporation", b =>
                {
                    b.Property<Guid>("CorporationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Credits");

                    b.HasKey("CorporationId");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("FNO.Domain.Models.FactorioEntity", b =>
                {
                    b.Property<Guid>("FactorioEntityId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Fluid");

                    b.Property<string>("Name");

                    b.Property<int>("StackSize");

                    b.Property<string>("Type");

                    b.HasKey("FactorioEntityId");

                    b.ToTable("EntityLibrary");
                });

            modelBuilder.Entity("FNO.Domain.Models.Factory", b =>
                {
                    b.Property<Guid>("FactoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CorporationId");

                    b.Property<long>("LastSeen");

                    b.Property<int>("Port");

                    b.HasKey("FactoryId");

                    b.HasIndex("CorporationId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("FNO.Domain.Models.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CorporationId");

                    b.HasKey("PlayerId");

                    b.HasIndex("CorporationId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FNO.Domain.Models.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CorporationId");

                    b.HasKey("WarehouseId");

                    b.HasIndex("CorporationId")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("FNO.Domain.Models.WarehouseInventory", b =>
                {
                    b.Property<Guid>("WarehouseInventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FactorioEntityId");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("WarehouseId");

                    b.HasKey("WarehouseInventoryId");

                    b.HasIndex("FactorioEntityId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseInventories");
                });

            modelBuilder.Entity("FNO.Domain.Models.Factory", b =>
                {
                    b.HasOne("FNO.Domain.Models.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FNO.Domain.Models.Player", b =>
                {
                    b.HasOne("FNO.Domain.Models.Corporation", "Corporation")
                        .WithMany("Members")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FNO.Domain.Models.Warehouse", b =>
                {
                    b.HasOne("FNO.Domain.Models.Corporation", "Corporation")
                        .WithOne("Warehouse")
                        .HasForeignKey("FNO.Domain.Models.Warehouse", "CorporationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FNO.Domain.Models.WarehouseInventory", b =>
                {
                    b.HasOne("FNO.Domain.Models.FactorioEntity", "FactorioEntity")
                        .WithMany()
                        .HasForeignKey("FactorioEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FNO.Domain.Models.Warehouse", "Warehouse")
                        .WithMany("Inventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
